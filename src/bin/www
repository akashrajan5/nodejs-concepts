const http = require('node:http');
const app = require('../../app');
require('dotenv').config();
const { client, connectDB } = require('../config/mongodb');
// const OS = require('node:os');


// add clister and child processes in different file
const cluster = require('node:cluster');
const { exec } = require('node:child_process');

const port = 3000;



// console.log("Number of cores : ", OS.cpus().length);

// if (cluster.isMaster) {
//     console.log(`Master process ${process.pid} is running`);
//     // create forks based on number of cores in the cpu, cores can be found using os.cpus().length, only increase workers on the basis of cpus
//     let workers = 2;
//     for (let i = 0; i < workers; i++) cluster.fork();

//     cluster.on('exit', (worker, code, signal) => {
//         console.log(`worker ${worker.process.pid} died\n\n`);
//         cluster.fork();
//     });

// } else {
//     console.log(`Worker process ${process.pid} started`);
//     app.set('port', process.env.PORT || port);
//     http.createServer(app).listen(process.env.PORT || port);
// }

app.set('port', process.env.PORT || port);
http.createServer(app).listen(process.env.PORT || port);
// database connection
// connectDB().catch(err => console.log(err));


process.on('uncaughtException', function (err) {
    console.log(err.code, err.port);
    console.error(err.stack);
    console.error((new Date).toUTCString() + ' uncaughtException:', err.message);
    // exec(`netstat -ano|findstr "PID :3000"`, (err, output) => {
    //     if (err) {
    //         console.error("could not execute command: ", err);
    //         return;
    //     }
    //     // log the output received from the command
    //     console.log("Output: \n", output);
    // });
    process.exit(1);
}).on('SIGINT', async function () {
    // close database connection
    // await client.close();
    console.log("DB connection closed");
    console.log("SIGINT");
}).on('SIGSTOP', () => {
    console.log("SIGSTOP");
});